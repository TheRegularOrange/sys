# Switch to the CompanyDB database
use CompanyDB

# Insert sample documents into Employee collection
db.Employee.insertMany([
  {
    Name: { FName: "John", LName: "Doe" },
    Company_Name: "Infosys",
    Salary: 60000,
    Designation: "Developer",
    Age: 29,
    Expertise: ["Java", "Spring", "MongoDB"],
    DOB: "1995-05-10",
    Email_id: "john.doe@infosys.com",
    Contact: "9876543210",
    Address: [{ PAddr: "123 Main St", LAddr: "Bangalore" }]
  },
  {
    Name: { FName: "Alice", LName: "Smith" },
    Company_Name: "TCS",
    Salary: 45000,
    Designation: "Tester",
    Age: 25,
    Expertise: ["Automation", "Python"],
    DOB: "1998-07-20",
    Email_id: "alice.smith@tcs.com",
    Contact: "9876543221",
    Address: [{ PAddr: "456 Elm St", LAddr: "Mumbai" }]
  },
  {
    Name: { FName: "Bob", LName: "Johnson" },
    Company_Name: "Infosys",
    Salary: 70000,
    Designation: "Manager",
    Age: 32,
    Expertise: ["Leadership", "Project Management", "Agile"],
    DOB: "1992-01-12",
    Email_id: "bob.johnson@infosys.com",
    Contact: "9876543232",
    Address: [{ PAddr: "789 Pine St", LAddr: "Chennai" }]
  },
  {
    Name: { FName: "Charlie", LName: "Brown" },
    Company_Name: "Accenture",
    Salary: 55000,
    Designation: "Developer",
    Age: 27,
    Expertise: ["C#", ".NET", "React"],
    DOB: "1997-02-05",
    Email_id: "charlie.brown@accenture.com",
    Contact: "9876543243",
    Address: [{ PAddr: "321 Oak St", LAddr: "Hyderabad" }]
  },
  {
    Name: { FName: "David", LName: "Williams" },
    Company_Name: "TCS",
    Salary: 35000,
    Designation: "Tester",
    Age: 24,
    Expertise: ["Manual Testing", "Selenium"],
    DOB: "1999-12-25",
    Email_id: "david.williams@tcs.com",
    Contact: "9876543254",
    Address: [{ PAddr: "987 Cedar St", LAddr: "Delhi" }]
  }
])

# 1. Final name of employee where age is less than 30 and salary more than 50000.
db.Employee.find(
  { Age: { $lt: 30 }, Salary: { $gt: 50000 } },
  { "Name.FName": 1, "Name.LName": 1, _id: 0 }
)

# 2. Create a new document if no document contains 
# { Designation: "Tester", Company_Name: "TCS", Age: 25 }
db.Employee.updateOne(
  { Designation: "Tester", Company_Name: "TCS", Age: 25 },
  {
    $setOnInsert: {
      Name: { FName: "Eve", LName: "Taylor" },
      Company_Name: "TCS",
      Salary: 28000,
      Designation: "Tester",
      Age: 25,
      Expertise: ["Manual Testing", "Automation"],
      DOB: "1998-06-15",
      Email_id: "eve.taylor@tcs.com",
      Contact: "9876543265",
      Address: [{ PAddr: "654 Birch St", LAddr: "Chennai" }]
    }
  },
  { upsert: true }
)

# 3. Selects all documents in the collection where the field age has a value 
# less than 30 or the value of the salary field is greater than 40000.
db.Employee.find(
  { $or: [{ Age: { $lt: 30 } }, { Salary: { $gt: 40000 } }] }
)

# 4. Find documents where Designation is not equal to "Developer".
db.Employee.find({ Designation: { $ne: "Developer" } })

# 5. Find _id, Designation, Address, and Name from all documents where 
# Company_Name is "Infosys".
db.Employee.find(
  { Company_Name: "Infosys" },
  { _id: 1, Designation: 1, Address: 1, "Name.FName": 1, "Name.LName": 1 }
)

# 6. Display only FName and LName of all Employees.
db.Employee.find(
  {},
  { "Name.FName": 1, "Name.LName": 1, _id: 0 }
)
